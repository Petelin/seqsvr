// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alloc_svr.proto

package allocsvr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Uid struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uid) Reset()         { *m = Uid{} }
func (m *Uid) String() string { return proto.CompactTextString(m) }
func (*Uid) ProtoMessage()    {}
func (*Uid) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2aea015f488f67, []int{0}
}

func (m *Uid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uid.Unmarshal(m, b)
}
func (m *Uid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uid.Marshal(b, m, deterministic)
}
func (m *Uid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uid.Merge(m, src)
}
func (m *Uid) XXX_Size() int {
	return xxx_messageInfo_Uid.Size(m)
}
func (m *Uid) XXX_DiscardUnknown() {
	xxx_messageInfo_Uid.DiscardUnknown(m)
}

var xxx_messageInfo_Uid proto.InternalMessageInfo

func (m *Uid) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Uid) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SectionIdArr struct {
	Val                  []uint32 `protobuf:"varint,1,rep,packed,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SectionIdArr) Reset()         { *m = SectionIdArr{} }
func (m *SectionIdArr) String() string { return proto.CompactTextString(m) }
func (*SectionIdArr) ProtoMessage()    {}
func (*SectionIdArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2aea015f488f67, []int{1}
}

func (m *SectionIdArr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SectionIdArr.Unmarshal(m, b)
}
func (m *SectionIdArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SectionIdArr.Marshal(b, m, deterministic)
}
func (m *SectionIdArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionIdArr.Merge(m, src)
}
func (m *SectionIdArr) XXX_Size() int {
	return xxx_messageInfo_SectionIdArr.Size(m)
}
func (m *SectionIdArr) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionIdArr.DiscardUnknown(m)
}

var xxx_messageInfo_SectionIdArr proto.InternalMessageInfo

func (m *SectionIdArr) GetVal() []uint32 {
	if m != nil {
		return m.Val
	}
	return nil
}

//map[string][]SectionID => ip:{1,2,3}
type SeqNum struct {
	SeqNum               uint64                   `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Router               map[string]*SectionIdArr `protobuf:"bytes,2,rep,name=router,proto3" json:"router,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SeqNum) Reset()         { *m = SeqNum{} }
func (m *SeqNum) String() string { return proto.CompactTextString(m) }
func (*SeqNum) ProtoMessage()    {}
func (*SeqNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2aea015f488f67, []int{2}
}

func (m *SeqNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeqNum.Unmarshal(m, b)
}
func (m *SeqNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeqNum.Marshal(b, m, deterministic)
}
func (m *SeqNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqNum.Merge(m, src)
}
func (m *SeqNum) XXX_Size() int {
	return xxx_messageInfo_SeqNum.Size(m)
}
func (m *SeqNum) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqNum.DiscardUnknown(m)
}

var xxx_messageInfo_SeqNum proto.InternalMessageInfo

func (m *SeqNum) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *SeqNum) GetRouter() map[string]*SectionIdArr {
	if m != nil {
		return m.Router
	}
	return nil
}

func init() {
	proto.RegisterType((*Uid)(nil), "allocsvr.Uid")
	proto.RegisterType((*SectionIdArr)(nil), "allocsvr.SectionIdArr")
	proto.RegisterType((*SeqNum)(nil), "allocsvr.SeqNum")
	proto.RegisterMapType((map[string]*SectionIdArr)(nil), "allocsvr.SeqNum.RouterEntry")
}

func init() { proto.RegisterFile("alloc_svr.proto", fileDescriptor_eb2aea015f488f67) }

var fileDescriptor_eb2aea015f488f67 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xcd, 0x3a, 0x3b, 0x7d, 0x75, 0x6c, 0xe4, 0xa0, 0x65, 0x78, 0x28, 0x3d, 0xf5, 0x20,
	0x05, 0xeb, 0x0e, 0xe2, 0x6d, 0x88, 0x82, 0x97, 0x81, 0x29, 0x3b, 0x8f, 0xda, 0x3e, 0xb0, 0xd8,
	0x35, 0xee, 0x35, 0x09, 0xee, 0x5f, 0xf2, 0xaf, 0x94, 0xa4, 0x1b, 0x1b, 0xde, 0x5e, 0xde, 0xf7,
	0x47, 0x3e, 0x09, 0x4c, 0x8a, 0xa6, 0x91, 0xe5, 0xba, 0x33, 0x94, 0x7e, 0x93, 0x54, 0x92, 0x5f,
	0xb8, 0x45, 0x67, 0x28, 0xbe, 0x07, 0x6f, 0x55, 0x57, 0x7c, 0x0a, 0x9e, 0xae, 0xab, 0x90, 0x45,
	0x2c, 0x19, 0x0b, 0x3b, 0xf2, 0x10, 0x46, 0x06, 0xa9, 0xab, 0x65, 0x1b, 0x0e, 0x22, 0x96, 0x0c,
	0xc5, 0xe1, 0x18, 0x47, 0x70, 0x95, 0x63, 0xa9, 0x6a, 0xd9, 0xbe, 0x55, 0x0b, 0x22, 0x9b, 0x35,
	0x45, 0x13, 0xb2, 0xc8, 0xb3, 0x59, 0x53, 0x34, 0xf1, 0x2f, 0x03, 0x3f, 0xc7, 0xed, 0x52, 0x6f,
	0xf8, 0x0d, 0x8c, 0x3a, 0xdc, 0xae, 0x5b, 0xbd, 0x71, 0xe5, 0x43, 0xe1, 0x77, 0xbd, 0x30, 0x07,
	0x9f, 0xa4, 0x56, 0x48, 0xe1, 0x20, 0xf2, 0x92, 0x20, 0xbb, 0x4d, 0x0f, 0x4c, 0x69, 0x1f, 0x4d,
	0x85, 0x93, 0x5f, 0x5a, 0x45, 0x3b, 0xb1, 0xf7, 0xce, 0xde, 0x21, 0x38, 0x59, 0xdb, 0xab, 0xbf,
	0x70, 0xe7, 0x9a, 0x2f, 0x85, 0x1d, 0xf9, 0x1d, 0x9c, 0x9b, 0xa2, 0xd1, 0xe8, 0xa0, 0x83, 0xec,
	0xfa, 0xb4, 0xf5, 0xc8, 0x2c, 0x7a, 0xd3, 0xd3, 0xe0, 0x91, 0x65, 0xcf, 0x10, 0x2c, 0xac, 0x27,
	0x47, 0x32, 0x48, 0x7c, 0x0e, 0x93, 0x57, 0x54, 0xe5, 0xe7, 0x12, 0x7f, 0xd4, 0xfe, 0x0d, 0xe3,
	0x63, 0xc9, 0xaa, 0xae, 0x66, 0xd3, 0xff, 0xa4, 0xf1, 0xd9, 0x87, 0xef, 0xfe, 0xf5, 0xe1, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0x16, 0xac, 0xea, 0x6a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AllocServerClient is the client API for AllocServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllocServerClient interface {
	FetchNextSeqNum(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*SeqNum, error)
}

type allocServerClient struct {
	cc *grpc.ClientConn
}

func NewAllocServerClient(cc *grpc.ClientConn) AllocServerClient {
	return &allocServerClient{cc}
}

func (c *allocServerClient) FetchNextSeqNum(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*SeqNum, error) {
	out := new(SeqNum)
	err := c.cc.Invoke(ctx, "/allocsvr.AllocServer/FetchNextSeqNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocServerServer is the server API for AllocServer service.
type AllocServerServer interface {
	FetchNextSeqNum(context.Context, *Uid) (*SeqNum, error)
}

// UnimplementedAllocServerServer can be embedded to have forward compatible implementations.
type UnimplementedAllocServerServer struct {
}

func (*UnimplementedAllocServerServer) FetchNextSeqNum(ctx context.Context, req *Uid) (*SeqNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNextSeqNum not implemented")
}

func RegisterAllocServerServer(s *grpc.Server, srv AllocServerServer) {
	s.RegisterService(&_AllocServer_serviceDesc, srv)
}

func _AllocServer_FetchNextSeqNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocServerServer).FetchNextSeqNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocsvr.AllocServer/FetchNextSeqNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocServerServer).FetchNextSeqNum(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

var _AllocServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "allocsvr.AllocServer",
	HandlerType: (*AllocServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNextSeqNum",
			Handler:    _AllocServer_FetchNextSeqNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alloc_svr.proto",
}
